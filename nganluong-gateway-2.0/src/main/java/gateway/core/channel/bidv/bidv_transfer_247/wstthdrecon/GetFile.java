
package gateway.core.channel.bidv.bidv_transfer_247.wstthdrecon;

import gateway.core.channel.dong_a_bank.ClientHandler;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "GetFile", targetNamespace = "http://wsTTHDRecon", wsdlLocation = "classpath:bidv-key/transfer247/upload.wsdl")
public class GetFile
    extends Service
{
    private static final Logger logger = LogManager.getLogger(GetFile.class);


    private final static URL GETFILE_WSDL_LOCATION;
    private final static WebServiceException GETFILE_EXCEPTION;
    private final static QName GETFILE_QNAME = new QName("http://wsTTHDRecon", "GetFile");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            disableSslVerification();
//            ClassLoader classLoader = GetFile.class.getClassLoader();
//            File pKeyFile = new File(classLoader.getResource("citibank-key-Certificate/PC20190926089219-live-uat.pfx").getFile());
//            url = new URL("classpath:bidv-key/transfer247/upload.wsdl");
            url = GetFile.class.getClassLoader().getResource("bidv-key/transfer247/upload.wsdl");
        } catch (Exception ex) {
            e = new WebServiceException(ex);
        }
        GETFILE_WSDL_LOCATION = url;
        GETFILE_EXCEPTION = e;
    }

    public GetFile() {
        super(__getWsdlLocation(), GETFILE_QNAME);
    }

    public GetFile(WebServiceFeature... features) {
        super(__getWsdlLocation(), GETFILE_QNAME, features);
    }

    public GetFile(URL wsdlLocation) {
        super(wsdlLocation, GETFILE_QNAME);
    }

    public GetFile(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, GETFILE_QNAME, features);
    }

    public GetFile(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public GetFile(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns TTHDOLRecon
     */
    @WebEndpoint(name = "TTHDOL_Recon")
    public TTHDOLRecon getTTHDOLRecon() {
        return super.getPort(new QName("http://wsTTHDRecon", "TTHDOL_Recon"), TTHDOLRecon.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TTHDOLRecon
     */
    @WebEndpoint(name = "TTHDOL_Recon")
    public TTHDOLRecon getTTHDOLRecon(WebServiceFeature... features) {
        return super.getPort(new QName("http://wsTTHDRecon", "TTHDOL_Recon"), TTHDOLRecon.class, features);
    }

    private static URL __getWsdlLocation() {
        if (GETFILE_EXCEPTION!= null) {
            throw GETFILE_EXCEPTION;
        }
        return GETFILE_WSDL_LOCATION;
    }

    private static void disableSslVerification() {
        try
        {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        } catch (NoSuchAlgorithmException | KeyManagementException e) {
            logger.info(ExceptionUtils.getStackTrace(e));
        }
    }
}
